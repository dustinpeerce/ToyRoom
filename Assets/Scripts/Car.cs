using System.Collections;
using System.Collections.Generic;
using UnityEngine;


namespace ToyRoom
{

    public class Car : Toy
    {
		
		// Public Attributes
        public GameObject car;				// Game object that contains the mesh
        public float speed = 1;				// Speed for the car
        public Material gazedAtMaterial;	// Material for being gazed at
        public Transform[] trackPoints1;	// Game objects for Track One
        public Transform[] trackPoints2;	// Game objects for Track Two

		// Private Attributes
		private MeshRenderer carMeshRenderer;	// Mesh Renderer component for the game object
		private Material defaultMaterial;		// Initial Material for the Mesh Renderer
        private Vector3 carStartPos;			// Start Position for the car
        private Transform[] currentTrackPoints;	// Stores the Transforms for the current track
        private Transform[] targetTrackPoints;	// Stores the Transforms for the target track that we are switching to
        private LTSpline track;					// Stores the LTSpline generated by LeanTween
        private bool trackOneIsActive;			// Tracks whether Track One is the active track


		/// <summary>
		/// Awake this instance.
		/// </summary>
        private void Awake()
        {
			// Initialize Private Attributes
			carMeshRenderer = car.GetComponent<MeshRenderer>();
			defaultMaterial = carMeshRenderer.material;
			carStartPos = transform.position;

			// Initialize Animator Parameter Dictionary
            canSeeToyKey = GameVals.AnimatorParameterKeys.canSeeCar;
            animatorParamDictionary = new Dictionary<string, bool>();
            animatorParamDictionary.Add(canSeeToyKey, false);
            animatorParamDictionary.Add(GameVals.AnimatorParameterKeys.carIsGazed, false);
            animatorParamDictionary.Add(GameVals.AnimatorParameterKeys.carIsDriving, false);
        }


		/// <summary>
		/// Start this instance.
		/// </summary>
        private void Start()
        {
            // Make the track from the provided transforms
            currentTrackPoints = trackPoints1;
            targetTrackPoints = trackPoints1;
            trackOneIsActive = true;
            SetSpline();
            LeanTween.pauseAll();
        }


		/// <summary>
		/// Sets the spline for the Target Track.
		/// </summary>
        private void SetSpline()
        {
            Vector3[] points = new Vector3[targetTrackPoints.Length];
            for (int i = 0; i < points.Length; i++)
            {
                points[i] = targetTrackPoints[i].position;
            }
            track = new LTSpline(points);
            LeanTween.moveSpline(this.gameObject, track, 10.0f).setOrientToPath(true).setLoopClamp();

            if (!animatorParamDictionary[GameVals.AnimatorParameterKeys.carIsDriving])
            {
                LeanTween.pauseAll();
            }
        }


		/// <summary>
		/// Update this instance.
		/// </summary>
        private void Update()
        {
			// Update the Track if the car is back at the starting point...
            if ( (transform.position - carStartPos).magnitude <= 0.1f )
            {
                if (currentTrackPoints != targetTrackPoints)
                {
                    SetSpline();
                    currentTrackPoints = targetTrackPoints;
                }
            }
        }


		/// <summary>
		/// Sets the gaze to gazedAt.
		/// </summary>
		/// <param name="gazedAt">If set to <c>true</c> the car is gazed at.</param>
        public void SetGazedAt(bool gazedAt)
        {
            animatorParamDictionary[GameVals.AnimatorParameterKeys.carIsGazed] = gazedAt;
			carMeshRenderer.material = gazedAt ? gazedAtMaterial : defaultMaterial;
        }


		/// <summary>
		/// Toggles the driving state.
		/// </summary>
        public void ToggleDriving()
        {
            if (animatorParamDictionary[GameVals.AnimatorParameterKeys.carIsDriving])
            {
                StopDriving();
            }
            else
            {
                StartDriving();
            }
        }


		/// <summary>
		/// Toggles the Target track.
		/// </summary>
        public void ToggleTrack()
        {
            if (trackOneIsActive)
            {
                targetTrackPoints = trackPoints2;
            }
            else
            {
                targetTrackPoints = trackPoints1;
            }

            trackOneIsActive = !trackOneIsActive;
        }


		/// <summary>
		/// Starts the driving.
		/// </summary>
        private void StartDriving()
        {
            LeanTween.resumeAll();
            animatorParamDictionary[GameVals.AnimatorParameterKeys.carIsDriving] = true;
        }


		/// <summary>
		/// Stops the driving.
		/// </summary>
        private void StopDriving()
        {
            LeanTween.pauseAll();
            animatorParamDictionary[GameVals.AnimatorParameterKeys.carIsDriving] = false;
        }

        
		/// <summary>
		/// Raises the draw gizmos event.
		/// </summary>
        void OnDrawGizmos()
        {
            LTSpline.drawGizmo(trackPoints1, Color.red);
            LTSpline.drawGizmo(trackPoints2, Color.blue);
        }

    } // end of class

} // end of namespace
